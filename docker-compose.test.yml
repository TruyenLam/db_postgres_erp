# ================================================
# ERP TN Group - Docker Compose (Test Version)
# Simplified for testing
# 
# Developer: Lam Van Truyen
# Email: lamvantruyen@gmail.com
# LinkedIn: https://www.linkedin.com/in/lamtruyen/
# Website: shareapiai.com
# ================================================

services:
  # ===========================================
  # PostgreSQL Database - Core ERP Database
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: erp_postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Ho_Chi_Minh
      
    ports:
      - "5432:5432"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./volumes/init:/docker-entrypoint-initdb.d
      - ./backup:/backup
      
    networks:
      - erp_network
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================
  # pgAdmin - Database Management Interface
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: erp_pgadmin
    restart: unless-stopped
    
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      
    ports:
      - "8080:80"
      
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      
    networks:
      - erp_network
      
    depends_on:
      postgres:
        condition: service_healthy

  # ===========================================
  # Redis - Caching v√† Session Management
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: erp_redis
    restart: unless-stopped
    
    command: redis-server --requirepass ${POSTGRES_PASSWORD}
    
    ports:
      - "6379:6379"
      
    volumes:
      - redis_data:/data
      
    networks:
      - erp_network
      
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# Network Configuration
# ===========================================
networks:
  erp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

# ===========================================
# Volume Configuration
# ===========================================
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
